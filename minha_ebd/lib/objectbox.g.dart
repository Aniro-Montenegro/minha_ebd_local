// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'models/church_model.dart';
import 'models/school_class.dart';
import 'models/student_model.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
      id: const obx_int.IdUid(1, 8932401175548277868),
      name: 'ChurchModel',
      lastPropertyId: const obx_int.IdUid(4, 6717618343866508373),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 4028749165865615682),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 4941117411876909770),
            name: 'churchName',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 9040834773443757120),
            name: 'shepherdName',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 6717618343866508373),
            name: 'schoolDirectorName',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[
        obx_int.ModelBacklink(
            name: 'students', srcEntity: 'StudentModel', srcField: 'church'),
        obx_int.ModelBacklink(
            name: 'schoolClasses',
            srcEntity: 'SchoolClassModel',
            srcField: 'church')
      ]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(2, 6803567697843601230),
      name: 'StudentModel',
      lastPropertyId: const obx_int.IdUid(6, 4064352793491851246),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 4899218916918329854),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 912339243608489118),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 6251123036168028183),
            name: 'birthDate',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 2023209907400108953),
            name: 'phone',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 1114857711595316407),
            name: 'churchId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(1, 8938140716180446729),
            relationTarget: 'ChurchModel'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 4064352793491851246),
            name: 'schoolClassId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(3, 7166476721402476955),
            relationTarget: 'SchoolClassModel')
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(3, 21368244535903787),
      name: 'SchoolClassModel',
      lastPropertyId: const obx_int.IdUid(4, 2999521508573307252),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 4989112623403976976),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 4684699811618061237),
            name: 'churchId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(2, 6434440549805848558),
            relationTarget: 'ChurchModel'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 8269586052970846406),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 2999521508573307252),
            name: 'classification',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[])
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore(
    {String? directory,
    int? maxDBSizeInKB,
    int? maxDataSizeInKB,
    int? fileMode,
    int? maxReaders,
    bool queriesCaseSensitiveDefault = true,
    String? macosApplicationGroup}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(getObjectBoxModel(),
      directory: directory ?? (await defaultStoreDirectory()).path,
      maxDBSizeInKB: maxDBSizeInKB,
      maxDataSizeInKB: maxDataSizeInKB,
      fileMode: fileMode,
      maxReaders: maxReaders,
      queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
      macosApplicationGroup: macosApplicationGroup);
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
      entities: _entities,
      lastEntityId: const obx_int.IdUid(3, 21368244535903787),
      lastIndexId: const obx_int.IdUid(3, 7166476721402476955),
      lastRelationId: const obx_int.IdUid(1, 2732398893053512167),
      lastSequenceId: const obx_int.IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [],
      retiredRelationUids: const [2732398893053512167],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, obx_int.EntityDefinition>{
    ChurchModel: obx_int.EntityDefinition<ChurchModel>(
        model: _entities[0],
        toOneRelations: (ChurchModel object) => [],
        toManyRelations: (ChurchModel object) => {
              obx_int.RelInfo<StudentModel>.toOneBacklink(5, object.id,
                      (StudentModel srcObject) => srcObject.church):
                  object.students,
              obx_int.RelInfo<SchoolClassModel>.toOneBacklink(2, object.id,
                      (SchoolClassModel srcObject) => srcObject.church):
                  object.schoolClasses
            },
        getId: (ChurchModel object) => object.id,
        setId: (ChurchModel object, int id) {
          object.id = id;
        },
        objectToFB: (ChurchModel object, fb.Builder fbb) {
          final churchNameOffset = fbb.writeString(object.churchName);
          final shepherdNameOffset = fbb.writeString(object.shepherdName);
          final schoolDirectorNameOffset =
              fbb.writeString(object.schoolDirectorName);
          fbb.startTable(5);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, churchNameOffset);
          fbb.addOffset(2, shepherdNameOffset);
          fbb.addOffset(3, schoolDirectorNameOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final churchNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final shepherdNameParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, '');
          final schoolDirectorNameParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, '');
          final object = ChurchModel(
              id: idParam,
              churchName: churchNameParam,
              shepherdName: shepherdNameParam,
              schoolDirectorName: schoolDirectorNameParam);
          obx_int.InternalToManyAccess.setRelInfo<ChurchModel>(
              object.students,
              store,
              obx_int.RelInfo<StudentModel>.toOneBacklink(
                  5, object.id, (StudentModel srcObject) => srcObject.church));
          obx_int.InternalToManyAccess.setRelInfo<ChurchModel>(
              object.schoolClasses,
              store,
              obx_int.RelInfo<SchoolClassModel>.toOneBacklink(2, object.id,
                  (SchoolClassModel srcObject) => srcObject.church));
          return object;
        }),
    StudentModel: obx_int.EntityDefinition<StudentModel>(
        model: _entities[1],
        toOneRelations: (StudentModel object) =>
            [object.church, object.schoolClass],
        toManyRelations: (StudentModel object) => {},
        getId: (StudentModel object) => object.id,
        setId: (StudentModel object, int id) {
          object.id = id;
        },
        objectToFB: (StudentModel object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          final phoneOffset = fbb.writeString(object.phone);
          fbb.startTable(7);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addInt64(2, object.birthDate.millisecondsSinceEpoch);
          fbb.addOffset(3, phoneOffset);
          fbb.addInt64(4, object.church.targetId);
          fbb.addInt64(5, object.schoolClass.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final birthDateParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0));
          final phoneParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final object = StudentModel(
              name: nameParam, birthDate: birthDateParam, phone: phoneParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          object.church.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0);
          object.church.attach(store);
          object.schoolClass.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0);
          object.schoolClass.attach(store);
          return object;
        }),
    SchoolClassModel: obx_int.EntityDefinition<SchoolClassModel>(
        model: _entities[2],
        toOneRelations: (SchoolClassModel object) => [object.church],
        toManyRelations: (SchoolClassModel object) => {},
        getId: (SchoolClassModel object) => object.id,
        setId: (SchoolClassModel object, int id) {
          object.id = id;
        },
        objectToFB: (SchoolClassModel object, fb.Builder fbb) {
          final nameOffset =
              object.name == null ? null : fbb.writeString(object.name!);
          final classificationOffset = object.classification == null
              ? null
              : fbb.writeString(object.classification!);
          fbb.startTable(5);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.church.targetId);
          fbb.addOffset(2, nameOffset);
          fbb.addOffset(3, classificationOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 8);
          final classificationParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 10);
          final object = SchoolClassModel(
              name: nameParam, classification: classificationParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          object.church.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0);
          object.church.attach(store);
          return object;
        })
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [ChurchModel] entity fields to define ObjectBox queries.
class ChurchModel_ {
  /// See [ChurchModel.id].
  static final id =
      obx.QueryIntegerProperty<ChurchModel>(_entities[0].properties[0]);

  /// See [ChurchModel.churchName].
  static final churchName =
      obx.QueryStringProperty<ChurchModel>(_entities[0].properties[1]);

  /// See [ChurchModel.shepherdName].
  static final shepherdName =
      obx.QueryStringProperty<ChurchModel>(_entities[0].properties[2]);

  /// See [ChurchModel.schoolDirectorName].
  static final schoolDirectorName =
      obx.QueryStringProperty<ChurchModel>(_entities[0].properties[3]);

  /// see [ChurchModel.students]
  static final students =
      obx.QueryBacklinkToMany<StudentModel, ChurchModel>(StudentModel_.church);

  /// see [ChurchModel.schoolClasses]
  static final schoolClasses =
      obx.QueryBacklinkToMany<SchoolClassModel, ChurchModel>(
          SchoolClassModel_.church);
}

/// [StudentModel] entity fields to define ObjectBox queries.
class StudentModel_ {
  /// See [StudentModel.id].
  static final id =
      obx.QueryIntegerProperty<StudentModel>(_entities[1].properties[0]);

  /// See [StudentModel.name].
  static final name =
      obx.QueryStringProperty<StudentModel>(_entities[1].properties[1]);

  /// See [StudentModel.birthDate].
  static final birthDate =
      obx.QueryDateProperty<StudentModel>(_entities[1].properties[2]);

  /// See [StudentModel.phone].
  static final phone =
      obx.QueryStringProperty<StudentModel>(_entities[1].properties[3]);

  /// See [StudentModel.church].
  static final church = obx.QueryRelationToOne<StudentModel, ChurchModel>(
      _entities[1].properties[4]);

  /// See [StudentModel.schoolClass].
  static final schoolClass =
      obx.QueryRelationToOne<StudentModel, SchoolClassModel>(
          _entities[1].properties[5]);
}

/// [SchoolClassModel] entity fields to define ObjectBox queries.
class SchoolClassModel_ {
  /// See [SchoolClassModel.id].
  static final id =
      obx.QueryIntegerProperty<SchoolClassModel>(_entities[2].properties[0]);

  /// See [SchoolClassModel.church].
  static final church = obx.QueryRelationToOne<SchoolClassModel, ChurchModel>(
      _entities[2].properties[1]);

  /// See [SchoolClassModel.name].
  static final name =
      obx.QueryStringProperty<SchoolClassModel>(_entities[2].properties[2]);

  /// See [SchoolClassModel.classification].
  static final classification =
      obx.QueryStringProperty<SchoolClassModel>(_entities[2].properties[3]);
}
